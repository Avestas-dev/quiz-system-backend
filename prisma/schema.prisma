// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id               Int              @id @default(autoincrement())
  question         String
  AnsweredQuestion UserAnswer[]
  training         Training         @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId       Int
  QuestionAnswer   QuestionAnswer[]
  CreatedAt        DateTime         @default(now())
  UpdatedAt        DateTime         @updatedAt @default(now())
}

model Training {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  visibility      Boolean
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  Question        Question[]
  TrainingSession TrainingSession[]
  CreatedAt       DateTime          @default(now())
  UpdatedAt       DateTime          @updatedAt @default(now())
}

model TrainingSession {
  id         Int          @id @default(autoincrement())
  finished   Boolean
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  Training   Training     @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId Int
  userAnswer UserAnswer[]
  CreatedAt  DateTime     @default(now())
  UpdatedAt  DateTime     @updatedAt @default(now())
}

model QuestionAnswer {
  id         Int          @id @default(autoincrement())
  questionId Int
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     String
  isCorrect  Boolean
  UserAnswer UserAnswer[]
  CreatedAt  DateTime     @default(now())
  UpdatedAt  DateTime     @updatedAt @default(now())
}

model UserAnswer {
  id                Int             @id @default(autoincrement())
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  trainingSessionId Int
  question          Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        Int
  questionAnswerId  Int
  questionAnswer    QuestionAnswer  @relation(fields: [questionAnswerId], references: [id])
  CreatedAt         DateTime        @default(now())
  UpdatedAt         DateTime        @updatedAt @default(now())
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  password           String
  refreshToken       String?
  passwordResetToken String?
  passwordResetDate  DateTime?
  googleSub          String?
  trainings          Training[]
  TrainingSession    TrainingSession[]
  CreatedAt          DateTime          @default(now())
  UpdatedAt          DateTime          @updatedAt @default(now())
}
